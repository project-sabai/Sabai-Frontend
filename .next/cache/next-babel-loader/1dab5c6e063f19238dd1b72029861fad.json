{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/angelico/Desktop/Sabai/with-cookie-auth-app/utils/auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nimport getHost from '../utils/get-host';\n\nfunction login({\n  token\n}) {\n  cookie.set('token', token, {\n    expires: 1\n  });\n  Router.push('/profile');\n}\n\nfunction logout() {\n  cookie.remove('token'); // to support logging out from all windows\n\n  window.localStorage.setItem('logout', _Date$now());\n  Router.push('/login');\n} // Gets the display name of a JSX component for dev tools\n\n\nconst getDisplayName = Component => Component.displayName || Component.name || 'Component';\n\nfunction withAuthSync(WrappedComponent) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = auth(ctx);\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread({}, componentProps, {\n        token\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.syncLogout = this.syncLogout.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener('storage', this.syncLogout);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('storage', this.syncLogout);\n      window.localStorage.removeItem('logout');\n    }\n\n    syncLogout(event) {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    }\n\n    render() {\n      return __jsx(WrappedComponent, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n}\n\nfunction auth(ctx) {\n  const {\n    token\n  } = nextCookie(ctx);\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    });\n    ctx.res.end();\n  } // We already checked for server. This should only happen on client.\n\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}\n\nasync function logInCheck(ctx) {\n  const {\n    token\n  } = nextCookie(ctx);\n  const apiUrl = getHost(ctx.req) + \"/api/profile\";\n\n  const redirectOnError = () => false ? Router.push(\"/login\") : ctx.res.writeHead(302, {\n    Location: \"/login\"\n  }).end();\n\n  try {\n    const response = await fetch(apiUrl, {\n      credentials: \"include\",\n      headers: {\n        Authorization: _JSON$stringify({\n          token\n        })\n      }\n    });\n\n    if (response.ok) {\n      const js = await response.json();\n      console.log(\"js\", js);\n      return js;\n    } else {\n      // https://github.com/developit/unfetch#caveats\n      return await redirectOnError();\n    }\n  } catch (error) {\n    // Implementation or Network error\n    return redirectOnError();\n  }\n}\n\nexport { login, logout, withAuthSync, auth, logInCheck };","map":{"version":3,"sources":["/Users/angelico/Desktop/Sabai/with-cookie-auth-app/utils/auth.js"],"names":["Component","Router","nextCookie","cookie","getHost","login","token","set","expires","push","logout","remove","window","localStorage","setItem","getDisplayName","displayName","name","withAuthSync","WrappedComponent","getInitialProps","ctx","auth","componentProps","constructor","props","syncLogout","bind","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","removeItem","event","key","console","log","render","req","res","writeHead","Location","end","logInCheck","apiUrl","redirectOnError","response","fetch","credentials","headers","Authorization","ok","js","json","error"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Router from 'next/router'\nimport nextCookie from 'next-cookies'\nimport cookie from 'js-cookie'\nimport getHost from '../utils/get-host'\n\nfunction login ({ token }) {\n  cookie.set('token', token, { expires: 1 })\n  Router.push('/profile')\n}\n\nfunction logout () {\n  cookie.remove('token')\n  // to support logging out from all windows\n  window.localStorage.setItem('logout', Date.now())\n  Router.push('/login')\n}\n\n// Gets the display name of a JSX component for dev tools\nconst getDisplayName = Component =>\n  Component.displayName || Component.name || 'Component'\n\nfunction withAuthSync (WrappedComponent) {\n  return class extends Component {\n    static displayName = `withAuthSync(${getDisplayName(WrappedComponent)})`\n\n    static async getInitialProps (ctx) {\n      const token = auth(ctx)\n\n      const componentProps =\n        WrappedComponent.getInitialProps &&\n        (await WrappedComponent.getInitialProps(ctx))\n\n      return { ...componentProps, token }\n    }\n\n    constructor (props) {\n      super(props)\n\n      this.syncLogout = this.syncLogout.bind(this)\n    }\n\n    componentDidMount () {\n      window.addEventListener('storage', this.syncLogout)\n    }\n\n    componentWillUnmount () {\n      window.removeEventListener('storage', this.syncLogout)\n      window.localStorage.removeItem('logout')\n    }\n\n    syncLogout (event) {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/login')\n      }\n    }\n\n    render () {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n\nfunction auth (ctx) {\n  const { token } = nextCookie(ctx)\n\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, { Location: '/login' })\n    ctx.res.end()\n  }\n\n  // We already checked for server. This should only happen on client.\n  if (!token) {\n    Router.push('/login')\n  }\n\n  return token\n}\n\nasync function logInCheck(ctx) {\n  const { token } = nextCookie(ctx);\n  const apiUrl = getHost(ctx.req) + \"/api/profile\";\n\n  const redirectOnError = () =>\n    typeof window !== \"undefined\"\n      ? Router.push(\"/login\")\n      : ctx.res.writeHead(302, { Location: \"/login\" }).end();\n\n  try {\n    const response = await fetch(apiUrl, {\n      credentials: \"include\",\n      headers: {\n        Authorization: JSON.stringify({ token })\n      }\n    })\n\n    if (response.ok) {\n      const js = await response.json();\n      console.log(\"js\", js);\n      return js;\n    } else {\n      // https://github.com/developit/unfetch#caveats\n      return await redirectOnError()\n    }\n  } catch (error) {\n    // Implementation or Network error\n    return redirectOnError()\n  }\n}\n\nexport { login, logout, withAuthSync, auth, logInCheck }\n"]},"metadata":{},"sourceType":"module"}